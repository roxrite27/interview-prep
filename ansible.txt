--configuration management
Configuration management is a process for maintaining computer systems, servers, applications, network devices, and other IT components in a desired state. It’s a way to help ensure that a system performs as expected, even after many changes are made over time. 
Using configuration management tools, administrators can set up an IT system, such as a server or workstation, then build and maintain other servers and workstations with the same settings

-- Do you think ansible is better than other configurtion management tools? if yes, why?

Agentless Architecture: One of Ansible's key advantages is its agentless architecture, which means it doesn't require software to be installed on managed nodes. This simplifies deployment and reduces overhead compared to agent-based tools like Puppet or Chef.

Simplicity and Ease of Use: Ansible uses YAML syntax for its playbooks, which makes it relatively easy to read, write, and understand compared to other configuration management tools that may require learning domain-specific languages.

SSH-Based Communication: Ansible uses SSH to communicate with managed nodes, which is typically already present on Unix-like systems, eliminating the need for additional software installation or configuration.


--can you write an ansible playbook to install httpd server and get it running

---
- name: Install and start Apache HTTP Server
  hosts: your_server_group
  become: yes  # This allows the tasks to run with elevated privileges (sudo)

  tasks:
    - name: Update package cache and install httpd
      yum:
        name: httpd
        state: present  # Ensure the package is installed

    - name: Start httpd service
      service:
        name: httpd
        state: started  # Ensure the service is running
        enabled: yes    # Ensure the service starts on boot

command: ansible-playbook -i inventory.ini install_httpd.yml

-- how ansible helped your organization
Automation: Ansible allows organizations to automate repetitive tasks such as configuration management, application deployment, and provisioning of infrastructure. This automation saves time, reduces manual errors, and enables teams to focus on higher-value tasks.

Consistency and Standardization: Ansible ensures that configurations across servers and environments remain consistent, reducing the risk of configuration drift and increasing reliability. This standardization makes it easier to manage infrastructure at scale and ensures compliance with organizational policies.

- ansible dynamic inventory
-- ansible tower and have u used it? if yes, why?
Ansible Tower is like the control tower in this scenario, but for IT automation. It helps manage, control, and navigate through numerous automation tasks (flights) in a complex IT environment (airspace). It provides a visual dashboard, role-based access control, and features like job scheduling and inventory management to ensure that all your automation tasks are handled efficiently and safely, just like an air traffic controller ensures smooth operation at an airport.

- how do you manage the RBAC of users for ansible tower
In Ansible Tower, Role-Based Access Control (RBAC) is managed through the Tower web interface. RBAC allows administrators to define roles with specific permissions and assign those roles to users or groups, controlling access to various features and resources within Tower. Here's how RBAC is typically managed in Ansible Tower:

Creating Roles: Administrators define roles in Tower based on the specific permissions they want to grant. Roles can include permissions such as creating and modifying job templates, managing inventory, accessing the Tower settings, and more.

Assigning Permissions to Roles: Within each role, administrators specify the permissions users or groups assigned to that role will have. These permissions can be fine-grained, allowing administrators to control access to individual features and resources in Tower.

Assigning Roles to Users or Groups: After roles are defined, administrators assign them to users or groups. This determines the access level each user or group has within Tower. Users can be assigned multiple roles, allowing for flexibility in defining access permissions.

Consider the role of an air traffic controller at a busy airport. The controller’s job is to manage multiple flights, ensuring they take off, land, and navigate the airspace safely and efficiently. Now, imagine doing this job without a control tower – it would be chaotic, inefficient, and prone to errors.



https://www.unixarena.com/2019/03/ansible-tower-awx-configuring-role-based-access-rbac.html/#google_vignette


- ansible galaxy command and why it is used for?
- can you explain the structure of ansible playbook roles?

An Ansible playbook is a YAML file that defines a series of tasks to be executed on one or more remote hosts. Playbooks are the heart of Ansible automation, providing a way to describe the desired state of the system and the actions needed to achieve that state. Here's an explanation of the structure of an Ansible playbook:
Play Declaration: Each play begins with a declaration containing a set of attributes that define the scope and parameters of the play. These attributes include:

name: A descriptive name for the play.
hosts: The group or groups of hosts on which the tasks in the play will be executed.
vars: Variables specific to the play.
tasks: The list of tasks to be executed.
Tasks: Within a play, tasks define the actions to be performed on the remote hosts. Each task is a dictionary containing one or more key-value pairs that specify the task's attributes. Common attributes include:

name: A descriptive name for the task.
action: The module or command to be executed.
args: Arguments to be passed to the module or command.
when: A conditional expression that determines whether the task should be executed.
notify: Handlers to be notified when the task changes the system state.
Handlers: Handlers are special tasks that are only executed if notified by other tasks. They are typically used to restart services or perform other actions in response to changes in the system state.

Variables: Playbooks can define variables at various levels, including playbook-level variables, play-level variables, and task-level variables. These variables can be used to parameterize tasks, making playbooks more flexible and reusable.

Includes and Imports: Playbooks can include or import other files, allowing for modularity and code reuse. This is useful for organizing complex playbooks into smaller, more manageable components.

Tags: Tasks and plays can be tagged with labels, allowing for selective execution of specific tasks or plays based on their tags. This is useful for debugging, testing, or running specific subsets of tasks within a playbook.


- what are handlers in ansible and why are they used?
- I would like to run a specific set of tasks only on vms and not on linux.. is it possible?
- Does ansible support parallel execution of tasks?
- protocol that ansible use to connect to vms?
-  can you place them in order of precedence
- how do you handles secrets in ansible?
-  can we use ansible for Iac? if yes can you compare it with any Iac tools like terraform
- can you talk about a ansible playbook that u wrote and how it helped your company
-  what do you think that ansible can improve
- why did you choose ansible why not chef, puppet
-diff bet pull/push  mech
-have you ever used modules
-types of inventories.. explain 
-real working of ansible.. modules->playbooks->plugins
- practical experience of ansible vault
ansible tower, its use
- you have multiple files, u want to copy it to targeted host. This should happen recursively.
- how do u use ansible to make encrypted files
- diff between plays and playbooks
- install nginx. write playbook
- when mster node is communicating to worker/slave node. how do ansible ensure security while communicating
- what do you prefer. playbooks or adhoc commands. --playbooks. then why we have adhoc commands
- how do you handle error/exceptions in ansible
-there is something ignoreerros in ansible. what is that
- how do we use ansible facts
- i have a playbook, there are number of tasks. i want to manage order of execution. OR why do we have serial keyword
- winrm, based on that how ansible handles windows system
- if i want to organise an structure in playbooks. what are the provisions that we have in ansible
- significance of ansible.cfg file
- how do we pass a dynamic inventory
- what are group_vars
- how do we manage windows machines using ansible
- what is the best method to make content reusable/redistributable
- ansible arch
- Ansible galaxy
- variables in ansible. difference between variable name and environment variable
- how would you access a variable pf the first host in a group
- how do I write an ansible handler with multiple tasks
- how to keep secret data in a playbook
- how is ansible used in continuos delivery pipeline
- How can you create a LAMP stack and deploy a webpage by using Ansible
- How do I set the PATH or any other environment variable for a task
- How can I generate encrypted password for the user module
- How can looping be done over a lists of hosts in a group, inside of a template
- How can I display all the inventory vars defined for my host
- How should one configure a Jump host to access servers that I have no direct access to
- How can you handle different machines needing different user accounts or ports to log in with
- Is it unsafe to bulk-set arguments from a variable
- Can the process of configuring prod environment be automated
- Have you worked with Ansible before? please share your experience
- Is Ansible an Open-Source Tool
- How can you connect other devices within Ansible
-Is it possible to build our modules in Ansible
- What does Fact mean in Ansible
- What is the ask_pass module in Ansible
- Explain the callback module in Ansible
- Does Ansible support AWS
- Does Ansible supports hardware provisioning
- Write an Ansible playbook to automate the starting of EC2 instance
- Can you copy files recursively onto a target host? If yes, how?
- Write a playbook to create a backup of a file in the remote servers before copy



 gcloud compute --project ceq-devops-sandbox ssh --region us-central1 gke-ceq-us-gke-poc-gke-node-19447db2-x1nw -- command 'uptime'  







